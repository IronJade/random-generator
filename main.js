/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
If you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => main_default
});
module.exports = __toCommonJS(main_exports);

// src/plugin.ts
var import_obsidian3 = require("obsidian");

// src/constants.ts
var DEFAULT_SETTINGS = {
  generators: [
    {
      name: "Tavern Generator",
      description: "Generates random tavern names and features",
      format: "{Beginning Name} {Ending Name}, known for {Known For}.",
      fields: {
        "Beginning Name": [
          "The Rusty",
          "The Golden",
          "The Drunken",
          "The Silver",
          "The Laughing",
          "The Prancing",
          "The Dancing",
          "The Sleeping",
          "The Leaping",
          "The Broken",
          "The Wicked",
          "The Wayward",
          "The Smiling",
          "The Crafty",
          "The Salty",
          "The Shining",
          "The Howling",
          "The Wandering",
          "The Crimson",
          "The Gilded"
        ],
        "Ending Name": [
          "Anchor",
          "Dragon",
          "Goblin",
          "Flagon",
          "Barrel",
          "Tankard",
          "Horse",
          "Pony",
          "Hound",
          "Knight",
          "Witch",
          "Sailor",
          "Axe",
          "Sword",
          "Shield",
          "Crown",
          "Piper",
          "Minstrel",
          "Cloak",
          "Lantern"
        ],
        "Known For": [
          "its strong ale",
          "its mysterious patrons",
          "its rowdy brawls",
          "its magical drinks",
          "its delicious stew",
          "its haunted cellar",
          "its beautiful barmaid",
          "its grumpy innkeeper",
          "its secret meetings",
          "its exotic food",
          "its gambling tables",
          "its bardic competitions",
          "its ancient history",
          "its unusual architecture",
          "its rare wines",
          "its monster trophies",
          "its hidden treasure",
          "its enchanted fireplace",
          "its famous guests",
          "its storytelling nights"
        ]
      }
    },
    {
      name: "Fantasy Character Generator",
      description: "Generates random fantasy characters",
      format: "A {Personality} {Race} {Class} who was once a {Background}.",
      fields: {
        "Race": [
          "Human",
          "Elf",
          "Dwarf",
          "Halfling",
          "Gnome",
          "Half-Elf",
          "Half-Orc",
          "Tiefling",
          "Dragonborn",
          "Orc",
          "Goblin",
          "Hobgoblin",
          "Lizardfolk",
          "Kenku",
          "Tabaxi",
          "Firbolg",
          "Tortle",
          "Genasi",
          "Aasimar",
          "Changeling"
        ],
        "Class": [
          "Fighter",
          "Wizard",
          "Cleric",
          "Rogue",
          "Bard",
          "Barbarian",
          "Druid",
          "Monk",
          "Paladin",
          "Ranger",
          "Sorcerer",
          "Warlock",
          "Artificer",
          "Blood Hunter",
          "Alchemist",
          "Necromancer",
          "Knight",
          "Archer",
          "Summoner",
          "Assassin"
        ],
        "Background": [
          "Noble",
          "Outlander",
          "Soldier",
          "Criminal",
          "Sage",
          "Acolyte",
          "Entertainer",
          "Guild Artisan",
          "Hermit",
          "Sailor",
          "Urchin",
          "Charlatan",
          "Folk Hero",
          "Merchant",
          "Knight",
          "Pirate",
          "Gladiator",
          "Spy",
          "Scholar",
          "Explorer"
        ],
        "Personality": [
          "Brave and reckless",
          "Cautious and methodical",
          "Arrogant and prideful",
          "Kind and generous",
          "Sarcastic and witty",
          "Silent and brooding",
          "Cheerful and optimistic",
          "Cynical and pessimistic",
          "Curious and inquisitive",
          "Loyal and honorable",
          "Greedy and selfish",
          "Wise and patient",
          "Impulsive and emotional",
          "Calculating and cunning",
          "Eccentric and unpredictable",
          "Shy and reserved",
          "Aggressive and confrontational",
          "Playful and mischievous",
          "Formal and proper",
          "Mysterious and secretive"
        ]
      }
    },
    {
      name: "Quest Generator",
      description: "Generates random quest hooks",
      format: "{Quest Giver} needs you to {Task} {Location}, {Complication}.",
      fields: {
        "Quest Giver": [
          "A noble lord",
          "A shady merchant",
          "A desperate farmer",
          "A mysterious wizard",
          "The town guard",
          "A crying child",
          "An elderly scholar",
          "A talking animal",
          "A ghostly apparition",
          "A royal messenger",
          "A wounded soldier",
          "A traveling bard",
          "A fortune teller",
          "A masked stranger",
          "A foreign diplomat",
          "A frightened innkeeper",
          "A captured fairy",
          "A powerful oracle",
          "A village elder",
          "A drunken sailor"
        ],
        "Task": [
          "retrieve a stolen artifact",
          "rescue a kidnapped person",
          "slay a dangerous monster",
          "investigate strange occurrences",
          "deliver a secret message",
          "break a terrible curse",
          "find a lost treasure",
          "escort a valuable shipment",
          "clear out a monster infestation",
          "negotiate a peace treaty",
          "sabotage an enemy operation",
          "win a competition",
          "gather rare ingredients",
          "map an unexplored region",
          "solve an ancient puzzle",
          "stop a dark ritual",
          "infiltrate a guarded location",
          "track down a fugitive",
          "protect a witness",
          "survive a deadly trial"
        ],
        "Location": [
          "in a forgotten dungeon",
          "in a corrupt city",
          "in a haunted forest",
          "in the monster-infested wilderness",
          "on a remote island",
          "in a foreign kingdom",
          "in the dangerous mountains",
          "in the scorching desert",
          "in the frozen tundra",
          "in an ancient ruin",
          "in a wealthy estate",
          "in the lawless borderlands",
          "in a magical academy",
          "in a sacred temple",
          "in the treacherous swamps",
          "in an underground network",
          "in a floating fortress",
          "in a parallel dimension",
          "in a besieged settlement",
          "in a cursed valley"
        ],
        "Complication": [
          "but it's all a trap",
          "but a rival group is also involved",
          "but the quest giver isn't telling the whole truth",
          "but there's a strict time limit",
          "but supernatural forces are interfering",
          "but the weather is becoming dangerous",
          "but a traitor is working against you",
          "but the situation is morally complex",
          "but the locals are hostile",
          "but the target is heavily guarded",
          "but the environment is hazardous",
          "but a curse is affecting the area",
          "but magical anomalies distort reality there",
          "but a powerful enemy is watching",
          "but resources in the area are scarce",
          "but a disease is spreading",
          "but political tensions complicate matters",
          "but the quest has unexpected cultural significance",
          "but an ancient prophecy is involved",
          "but nothing is as it first appears"
        ]
      }
    }
  ],
  customCSSEnabled: false,
  customCSSPath: ""
};
var DEFAULT_CSS = `
/* Random Generator Plugin - Default Style with Enhanced Settings */
.random-generator-modal {
    padding: 1.5rem;
    max-width: 600px;
    margin: 0 auto;
}

.random-generator-modal h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--background-modifier-border);
    color: var(--text-normal);
    font-size: 1.5rem;
    font-weight: 600;
}

.random-generator-modal h3 {
    margin-top: 1rem;
    margin-bottom: 0.75rem;
    color: var(--text-normal);
    font-size: 1.2rem;
    font-weight: 500;
}

.generator-select-container {
    display: flex;
    align-items: center;
    margin-bottom: 1.5rem;
}

.generator-select-container span {
    font-weight: 500;
    margin-right: 0.75rem;
    color: var(--text-normal);
}

.generator-select {
    flex-grow: 1;
    background-color: var(--background-secondary);
    color: var(--text-normal);
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    padding: 0.5rem 0.75rem;
    font-size: 0.9rem;
    outline: none;
    transition: all 0.2s ease;
    width: 100%; /* Ensure full width */
    height: auto; /* Allow height to adjust to content */
    min-height: 2.5rem; /* Minimum height to prevent cut-off */
    text-overflow: ellipsis; /* Show ellipsis for overflow text */
}

.generator-select:hover {
    border-color: var(--interactive-accent);
}

.generator-select:focus {
    border-color: var(--interactive-accent);
    box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.2);
}

.generator-result-container {
    margin-bottom: 1.5rem;
}

.generator-result {
    background-color: var(--background-secondary);
    border: 1px solid var(--background-modifier-border);
    border-radius: 6px;
    padding: 1rem;
    min-height: 20rem; /* 5x taller than before (~4rem) */
    color: var(--text-normal);
    line-height: 1.5;
    font-size: 0.95rem;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
    transition: background-color 0.2s ease;
    overflow-wrap: break-word;
    word-wrap: break-word;
    hyphens: auto;
}

.generator-result:hover {
    background-color: var(--background-secondary-alt);
}

.generator-button-container {
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
}

.generator-button-container button {
    background-color: var(--interactive-normal);
    color: var(--text-normal);
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.generator-button-container button:hover {
    background-color: var(--interactive-hover);
}

.generator-button-container button:first-child {
    background-color: var(--interactive-accent);
    color: var(--text-on-accent);
    border-color: var(--interactive-accent);
}

.generator-button-container button:first-child:hover {
    filter: brightness(1.1);
}

@keyframes highlight-result {
    0% {
        background-color: var(--interactive-accent);
        color: var(--text-on-accent);
    }
    100% {
        background-color: var(--background-secondary);
        color: var(--text-normal);
    }
}

.highlight-new-result {
    animation: highlight-result 1s ease;
}

/* Settings styles */
.field-settings {
    margin-left: 20px;
    margin-bottom: 10px;
    padding-left: 10px;
    border-left: 2px solid var(--background-modifier-border);
}

.field-actions {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    margin-top: 4px;
}

.field-actions button {
    font-size: 0.8rem;
    padding: 2px 8px;
}

.generator-settings {
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid var(--background-modifier-border);
}
    
/* Improved Field Settings Styles */
.generator-settings {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid var(--background-modifier-border);
}

.field-settings {
    display: grid;
    grid-template-columns: auto 1fr 200px;
    gap: 1rem;
    align-items: center;
    margin-bottom: 0.5rem;
}

.field-settings label {
    color: var(--text-muted);
    text-align: right;
    white-space: nowrap;
}

.field-settings textarea {
    width: 100%;
    min-height: 100px;
    padding: 0.5rem;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
    resize: vertical;
    font-family: inherit;
}

.field-settings textarea:focus {
    outline: 2px solid var(--interactive-accent);
    border-color: var(--interactive-accent);
}

.field-actions {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
}

.field-actions button {
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.8rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.field-actions .rename-field-button {
    background-color: var(--background-secondary);
    color: var(--text-normal);
    border: 1px solid var(--background-modifier-border);
}

.field-actions .delete-field-button {
    background-color: var(--text-accent);
    color: white;
    border: none;
}

.field-actions button:hover {
    filter: brightness(1.1);
}

.generator-settings .setting-name {
    font-weight: 600;
    color: var(--text-normal);
}

.generator-settings .setting-description {
    color: var(--text-muted);
    font-size: 0.9rem;
    margin-bottom: 0.5rem;
}

/* Styling for generator-level settings */
.generator-settings-header {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 1rem;
    align-items: center;
    margin-bottom: 1rem;
}

.generator-settings-header label {
    color: var(--text-muted);
    text-align: right;
    white-space: nowrap;
}

.generator-settings-header input,
.generator-settings-header textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
}

.generator-settings-header input:focus,
.generator-settings-header textarea:focus {
    outline: 2px solid var(--interactive-accent);
    border-color: var(--interactive-accent);
}

/* Buttons at the bottom of generator settings */
.generator-bottom-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
}

.generator-bottom-actions button {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.generator-duplicate-btn {
    background-color: var(--background-secondary);
    color: var(--text-normal);
    border: 1px solid var(--background-modifier-border);
}

.generator-remove-btn {
    background-color: var(--text-accent);
    color: white;
    border: none;
}

.generator-bottom-actions button:hover {
    filter: brightness(1.1);
}

/* Styles for Add Generator Modal */
.add-generator-modal {
    max-width: 500px;
    width: 100%;
}

.add-generator-modal .modal-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.add-generator-modal .setting-row {
    display: grid;
    grid-template-columns: 150px 1fr;
    align-items: center;
    gap: 1rem;
}

.add-generator-modal .setting-row label {
    text-align: right;
    color: var(--text-muted);
}

.add-generator-modal .setting-control {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
}

.add-generator-modal .setting-control:focus {
    outline: 2px solid var(--interactive-accent);
    border-color: var(--interactive-accent);
}

.add-generator-modal .fields-section {
    border-top: 1px solid var(--background-modifier-border);
    padding-top: 1rem;
    margin-top: 1rem;
}

.add-generator-modal .field-row {
    display: grid;
    grid-template-columns: 150px 1fr 100px;
    gap: 1rem;
    align-items: center;
    margin-bottom: 0.5rem;
}

.add-generator-modal .field-row input,
.add-generator-modal .field-row textarea {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
}

.add-generator-modal .field-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
}

.add-generator-modal .add-field-btn {
    background-color: var(--interactive-accent);
    color: var(--text-on-accent);
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.add-generator-modal .add-field-btn:hover {
    filter: brightness(1.1);
}

.add-generator-modal .remove-field-btn {
    background-color: var(--text-accent);
    color: white;
    border: none;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.add-generator-modal .remove-field-btn:hover {
    filter: brightness(1.1);
}

.add-generator-modal .modal-button-container {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    margin-top: 1rem;
}

.add-generator-modal .modal-button-container button {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.add-generator-modal .create-btn {
    background-color: var(--interactive-accent);
    color: var(--text-on-accent);
    border: none;
}

.add-generator-modal .cancel-btn {
    background-color: var(--background-secondary);
    color: var(--text-normal);
    border: 1px solid var(--background-modifier-border);
}

.add-generator-modal .create-btn:hover,
.add-generator-modal .cancel-btn:hover {
    filter: brightness(1.1);
}

/* Settings Tabs */
.nav-container {
    display: flex;
    margin-bottom: 20px;
    border-bottom: 1px solid var(--background-modifier-border);
}

.nav-container button {
    padding: 8px 16px;
    border: none;
    background: none;
    cursor: pointer;
    border-radius: 4px 4px 0 0;
    margin-right: 4px;
    transition: all 0.2s ease;
}

.nav-container button:hover {
    background-color: var(--background-modifier-hover);
}

/* Content container */
.content-container {
    max-height: 500px;
    overflow-y: auto;
    padding: 15px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-primary);
}

/* Section headers */
.section-header h2 {
    margin-top: 0;
    margin-bottom: 8px;
    font-size: 1.3em;
    color: var(--text-normal);
}

.section-header p {
    margin-top: 0;
    margin-bottom: 20px;
    color: var(--text-muted);
    font-size: 0.9em;
}

/* Generator Cards */
.generators-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 15px;
    margin-top: 20px;
}

.generator-card {
    border: 1px solid var(--background-modifier-border);
    border-radius: 5px;
    padding: 15px;
    background-color: var(--background-secondary);
    transition: box-shadow 0.2s ease, transform 0.2s ease;
}

.generator-card:hover {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
}

.generator-header {
    border-bottom: 1px solid var(--background-modifier-border);
    padding-bottom: 8px;
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.generator-header h3 {
    margin: 0;
    font-size: 1.1em;
}

.generator-actions {
    display: flex;
    justify-content: flex-end;
    gap: 8px;
    margin-top: 10px;
    padding-top: 10px;
    border-top: 1px solid var(--background-modifier-border);
}

/* Modal Styling */
.modal-scroll-container {
    height: calc(80vh - 100px);
    overflow-y: auto;
    overflow-x: hidden; /* Prevent horizontal scrolling */
    padding: 20px;
    box-sizing: border-box;
    width: 100%;
}

.fields-section {
    margin-top: 20px;
    padding-top: 10px;
    border-top: 1px solid var(--background-modifier-border);
    width: 100%;
    box-sizing: border-box;
}

.field-container {
    margin-bottom: 15px;
    padding: 15px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 5px;
    background-color: var(--background-primary-alt);
    width: 100%;
    box-sizing: border-box;
}

.field-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    width: 100%;
}

.button-container {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 15px;
    padding: 15px 20px;
    border-top: 1px solid var(--background-modifier-border);
    background-color: var(--background-primary);
    position: sticky;
    bottom: 0;
    width: 100%;
    box-sizing: border-box;
}

.button-container button {
    padding: 6px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9em;
}

.button-container button.mod-cta {
    background-color: var(--interactive-accent);
    color: var(--text-on-accent);
    border: none;
}

/* Form Input Styling */
.setting-item {
    border-top: none !important;
    padding-top: 0.75em;
    padding-bottom: 0.75em;
}

.setting-item input[type="text"],
.setting-item textarea {
    width: 100%;
    padding: 6px 8px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
    box-sizing: border-box;
}

.setting-item textarea {
    min-height: 80px;
    font-family: inherit;
}

.setting-item input[type="text"]:focus,
.setting-item textarea:focus {
    border-color: var(--interactive-accent);
    box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.2);
}

/* Ensure text doesn't get cut off */
.setting-item-info {
    flex: 1 0 0; /* Allow this to grow but not shrink */
}

/* Form elements in modals */
.modal input[type="text"],
.modal textarea {
    width: 100%;
    padding: 6px 8px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 4px;
    background-color: var(--background-secondary);
    color: var(--text-normal);
    box-sizing: border-box;
}

.modal textarea {
    min-height: 80px;
    resize: vertical;
}

.modal input[type="text"]:focus,
.modal textarea:focus {
    border-color: var(--interactive-accent);
    box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.2);
    outline: none;
}

/* Fix for modal width */
.modal {
    max-width: 800px;
    width: auto !important;
}

.modal-content {
    padding: 0;
    margin: 0;
    width: 100%;
    box-sizing: border-box;
}

/* Extra button styling */
.clickable-icon {
    padding: 4px;
    border-radius: 4px;
    color: var(--text-muted);
    transition: background-color 0.2s ease, color 0.2s ease;
}

.clickable-icon:hover {
    background-color: var(--background-modifier-hover);
    color: var(--text-normal);
}

/* Responsive adjustments for smaller screens */
@media (max-width: 768px) {
    .generators-container {
        grid-template-columns: 1fr;
    }
    
    .nav-container {
        flex-wrap: wrap;
    }
    
    .nav-container button {
        flex-grow: 1;
        text-align: center;
        margin-bottom: 5px;
    }
}`;

// src/generator-modal.ts
var import_obsidian = require("obsidian");

// src/utils/generator.ts
function generateFromTemplate(generator) {
  if (!generator || !generator.fields || !generator.format) {
    return "Error: Invalid generator format";
  }
  try {
    const selections = {};
    for (const [fieldName, items] of Object.entries(generator.fields)) {
      if (Array.isArray(items) && items.length > 0) {
        const randomIndex = Math.floor(Math.random() * items.length);
        selections[fieldName] = items[randomIndex];
      } else {
        selections[fieldName] = "[Empty]";
      }
    }
    let result = generator.format;
    for (const [fieldName, value] of Object.entries(selections)) {
      result = result.replace(`{${fieldName}}`, value);
    }
    return result;
  } catch (error) {
    console.error("Error generating from template:", error);
    return "Error generating content";
  }
}
function duplicateGenerator(generator, newName) {
  const copy = JSON.parse(JSON.stringify(generator));
  if (newName) {
    copy.name = newName;
  } else {
    copy.name = `${generator.name} (Copy)`;
  }
  return copy;
}
function validateGenerator(generator) {
  if (!generator) return false;
  if (typeof generator.name !== "string" || !generator.name.trim()) return false;
  if (typeof generator.format !== "string" || !generator.format.trim()) return false;
  if (!generator.fields || typeof generator.fields !== "object") return false;
  let hasValidField = false;
  for (const fieldName in generator.fields) {
    const field = generator.fields[fieldName];
    if (Array.isArray(field) && field.length > 0) {
      hasValidField = true;
      break;
    }
  }
  return hasValidField;
}

// src/generator-modal.ts
var GeneratorModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.selectedGenerator = "";
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("random-generator-modal");
    try {
      contentEl.createEl("h2", { text: "Random Generator" });
      const selectContainer = contentEl.createDiv({ cls: "generator-select-container" });
      selectContainer.createEl("span", { text: "Select Generator: " });
      const selectEl = selectContainer.createEl("select", { cls: "generator-select" });
      if (this.plugin.settings.generators && this.plugin.settings.generators.length > 0) {
        this.plugin.settings.generators.forEach((generator) => {
          selectEl.createEl("option", { value: generator.name, text: generator.name });
        });
        this.selectedGenerator = this.plugin.settings.generators[0].name;
      } else {
        selectEl.createEl("option", { value: "", text: "No generators available" });
        this.selectedGenerator = "";
      }
      selectEl.addEventListener("change", (e) => {
        this.selectedGenerator = e.target.value;
      });
      const resultContainer = contentEl.createDiv({ cls: "generator-result-container" });
      resultContainer.createEl("h3", { text: "Generated Result:" });
      this.resultEl = resultContainer.createDiv({ cls: "generator-result" });
      const buttonContainer = contentEl.createDiv({ cls: "generator-button-container" });
      const generateButton = buttonContainer.createEl("button", { text: "Generate" });
      generateButton.addEventListener("click", () => {
        this.generateResult();
      });
      const insertButton = buttonContainer.createEl("button", { text: "Insert" });
      insertButton.addEventListener("click", () => {
        this.insertResult();
      });
      if (this.selectedGenerator) {
        this.generateResult();
      }
    } catch (error) {
      console.error("Error in modal onOpen:", error);
      contentEl.createEl("p", { text: "An error occurred. Please check the console for details." });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  /**
   * Generate a new random result
   */
  generateResult() {
    try {
      if (this.selectedGenerator && this.plugin.settings.generators) {
        const generator = this.plugin.settings.generators.find((g) => g.name === this.selectedGenerator);
        if (generator) {
          const result = generateFromTemplate(generator);
          this.resultEl.setText(result);
          this.resultEl.addClass("highlight-new-result");
          setTimeout(() => {
            this.resultEl.removeClass("highlight-new-result");
          }, 1e3);
        }
      }
    } catch (error) {
      console.error("Error generating result:", error);
      this.resultEl.setText("Error generating content");
    }
  }
  /**
   * Insert the current result into the active editor
   */
  insertResult() {
    try {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view && this.resultEl.textContent) {
        const editor = this.getEditor(activeLeaf.view);
        if (editor) {
          editor.replaceSelection(this.resultEl.textContent);
          this.close();
        } else {
          new import_obsidian.Notice("No active editor found");
        }
      }
    } catch (error) {
      console.error("Error inserting result:", error);
      new import_obsidian.Notice("Error inserting result");
    }
  }
  /**
   * Helper to get editor from view with type safety
   */
  getEditor(view) {
    return view.editor;
  }
};

// src/settings-tab.ts
var import_obsidian2 = require("obsidian");
var RandomGeneratorSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.activeTab = "general";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Random Generator Settings" });
    const navContainer = containerEl.createDiv("nav-container");
    navContainer.style.display = "flex";
    navContainer.style.marginBottom = "20px";
    navContainer.style.borderBottom = "1px solid var(--background-modifier-border)";
    const createTab = (id, label) => {
      const tab = navContainer.createEl("button", { text: label });
      tab.style.padding = "8px 16px";
      tab.style.border = "none";
      tab.style.background = "none";
      tab.style.cursor = "pointer";
      tab.style.borderRadius = "4px 4px 0 0";
      tab.style.marginRight = "4px";
      if (id === this.activeTab) {
        tab.style.borderBottom = "2px solid var(--interactive-accent)";
        tab.style.fontWeight = "bold";
        tab.style.color = "var(--interactive-accent)";
      }
      tab.addEventListener("click", () => {
        this.activeTab = id;
        this.display();
      });
      return tab;
    };
    createTab("general", "General");
    createTab("generators", "Generators");
    createTab("appearance", "Appearance");
    createTab("import-export", "Import/Export");
    const contentContainer = containerEl.createDiv("content-container");
    contentContainer.style.maxHeight = "500px";
    contentContainer.style.overflowY = "auto";
    contentContainer.style.padding = "10px";
    contentContainer.style.border = "1px solid var(--background-modifier-border)";
    contentContainer.style.borderRadius = "4px";
    switch (this.activeTab) {
      case "general":
        this.displayGeneralSettings(contentContainer);
        break;
      case "generators":
        this.displayGeneratorsSettings(contentContainer);
        break;
      case "appearance":
        this.displayAppearanceSettings(contentContainer);
        break;
      case "import-export":
        this.displayImportExportSettings(contentContainer);
        break;
    }
  }
  /**
   * Display General Settings Tab
   */
  displayGeneralSettings(containerEl) {
    const generalSection = containerEl.createDiv("general-section");
    const headerContainer = generalSection.createDiv("section-header");
    headerContainer.createEl("h2", { text: "General Settings" });
    headerContainer.createEl("p", {
      text: "Configure general settings for the Random Generator plugin.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(generalSection).setName("Restore Default Generators").setDesc("Reset to the default generators that come with the plugin.").addButton((button) => {
      return button.setTooltip("Restore Defaults").setCta().setButtonText("Restore Defaults").onClick(async () => {
        this.restoreDefaultGenerators();
      });
    });
  }
  /**
   * Display Generators Settings Tab
   */
  displayGeneratorsSettings(containerEl) {
    const generatorsSection = containerEl.createDiv("generators-section");
    const headerContainer = generatorsSection.createDiv("section-header");
    headerContainer.createEl("h2", { text: "Generators" });
    headerContainer.createEl("p", {
      text: "Manage the available random content generators.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(generatorsSection).setName("Add New Generator").setDesc("Create a new generator for random content").addButton((button) => {
      return button.setTooltip("Add Generator").setCta().setButtonText("+").onClick(() => this.openGeneratorModal());
    });
    const generatorsContainer = generatorsSection.createDiv("generators-container");
    generatorsContainer.style.display = "grid";
    generatorsContainer.style.gridTemplateColumns = "repeat(auto-fill, minmax(300px, 1fr))";
    generatorsContainer.style.gap = "15px";
    generatorsContainer.style.marginTop = "20px";
    this.plugin.settings.generators.forEach((generator, index) => {
      const generatorCard = generatorsContainer.createDiv("generator-card");
      generatorCard.style.border = "1px solid var(--background-modifier-border)";
      generatorCard.style.borderRadius = "5px";
      generatorCard.style.padding = "15px";
      generatorCard.style.backgroundColor = "var(--background-secondary)";
      const generatorHeader = generatorCard.createDiv("generator-header");
      generatorHeader.style.borderBottom = "1px solid var(--background-modifier-border)";
      generatorHeader.style.paddingBottom = "8px";
      generatorHeader.style.marginBottom = "10px";
      generatorHeader.style.display = "flex";
      generatorHeader.style.justifyContent = "space-between";
      generatorHeader.style.alignItems = "center";
      const titleSection = generatorHeader.createDiv("title-section");
      titleSection.createEl("h3", {
        text: generator.name,
        attr: { style: "margin: 0; font-size: 1.1em;" }
      });
      const descElement = generatorCard.createEl("p", {
        text: generator.description || "No description provided.",
        attr: { style: "margin: 0 0 10px 0; font-size: 0.9em; color: var(--text-muted);" }
      });
      const formatElement = generatorCard.createEl("div", {
        cls: "format-pattern",
        attr: { style: "font-family: monospace; background: var(--background-primary-alt); padding: 8px; border-radius: 4px; margin-bottom: 10px; font-size: 0.9em; overflow-wrap: break-word;" }
      });
      formatElement.textContent = generator.format;
      const fieldsElement = generatorCard.createDiv("fields-list");
      fieldsElement.style.marginBottom = "15px";
      if (generator.fields && Object.keys(generator.fields).length > 0) {
        fieldsElement.createEl("h4", {
          text: "Fields",
          attr: { style: "margin: 0 0 5px 0; font-size: 0.95em;" }
        });
        const fieldsList = fieldsElement.createEl("ul", {
          attr: { style: "margin: 0; padding-left: 20px;" }
        });
        Object.entries(generator.fields).forEach(([fieldName, values]) => {
          const fieldItem = fieldsList.createEl("li", {
            attr: { style: "font-size: 0.85em;" }
          });
          fieldItem.textContent = `${fieldName}: ${Array.isArray(values) ? values.length : 0} options`;
        });
      }
      const generatorActions = generatorCard.createDiv("generator-actions");
      generatorActions.style.display = "flex";
      generatorActions.style.justifyContent = "flex-end";
      generatorActions.style.gap = "5px";
      generatorActions.style.marginTop = "5px";
      generatorActions.style.paddingTop = "8px";
      generatorActions.style.borderTop = "1px solid var(--background-modifier-border)";
      new import_obsidian2.ExtraButtonComponent(generatorActions.createDiv()).setIcon("pencil").setTooltip("Edit").onClick(() => {
        this.openGeneratorModal(generator, index);
      });
      new import_obsidian2.ExtraButtonComponent(generatorActions.createDiv()).setIcon("copy").setTooltip("Duplicate").onClick(async () => {
        const newGenerator = duplicateGenerator(generator);
        this.plugin.settings.generators.push(newGenerator);
        await this.plugin.saveSettings();
        this.display();
      });
      new import_obsidian2.ExtraButtonComponent(generatorActions.createDiv()).setIcon("trash").setTooltip("Delete").onClick(async () => {
        this.plugin.settings.generators.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  /**
   * Display Appearance Settings Tab
   */
  displayAppearanceSettings(containerEl) {
    const appearanceSection = containerEl.createDiv("appearance-section");
    const headerContainer = appearanceSection.createDiv("section-header");
    headerContainer.createEl("h2", { text: "Appearance" });
    headerContainer.createEl("p", {
      text: "Customize the look and feel of the Random Generator.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(appearanceSection).setName("Use Custom CSS").setDesc("Enable using a custom CSS file for styling the generator").addToggle((toggle) => toggle.setValue(this.plugin.settings.customCSSEnabled).onChange(async (value) => {
      this.plugin.settings.customCSSEnabled = value;
      await this.plugin.saveSettings();
      this.plugin.loadCSS();
    }));
    new import_obsidian2.Setting(appearanceSection).setName("Custom CSS Path").setDesc("Path to your custom CSS file in the vault (relative to vault root)").addText((text) => text.setPlaceholder("path/to/custom-style.css").setValue(this.plugin.settings.customCSSPath).onChange(async (value) => {
      this.plugin.settings.customCSSPath = value;
      await this.plugin.saveSettings();
      if (this.plugin.settings.customCSSEnabled) {
        this.plugin.loadCSS();
      }
    }));
  }
  /**
   * Display Import/Export Settings Tab
   */
  displayImportExportSettings(containerEl) {
    const importExportSection = containerEl.createDiv("import-export-section");
    const headerContainer = importExportSection.createDiv("section-header");
    headerContainer.createEl("h2", { text: "Import/Export" });
    headerContainer.createEl("p", {
      text: "Import or export your generators for backup or sharing.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(importExportSection).setName("Export All Generators").setDesc("Export all generators to a JSON file").addButton((button) => button.setButtonText("Export").setCta().onClick(async () => {
      this.exportGenerators();
    }));
    new import_obsidian2.Setting(importExportSection).setName("Import Generators").setDesc("Import generators from a JSON file (will append to existing generators)").addText((text) => text.setPlaceholder("path/to/import-file.json").setValue("")).addButton((button) => button.setButtonText("Import").onClick((evt) => {
      this.importGenerators(evt);
    }));
  }
  /**
   * Export generators to a JSON file
   */
  async exportGenerators() {
    try {
      const exportData = JSON.stringify(this.plugin.settings.generators, null, 2);
      const date = /* @__PURE__ */ new Date();
      const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}-${String(date.getDate()).padStart(2, "0")}`;
      const exportPath = `random-generators-export-${dateStr}.json`;
      const adapter = this.plugin.app.vault.adapter;
      await adapter.write(exportPath, exportData);
      new import_obsidian2.Notice(`Generators exported to ${exportPath}`);
    } catch (error) {
      console.error("Failed to export generators:", error);
      new import_obsidian2.Notice("Failed to export generators");
    }
  }
  /**
   * Import generators from a JSON file
   */
  async importGenerators(evt) {
    try {
      const settingItem = evt.target.closest(".setting-item");
      if (!settingItem) return;
      const importPathEl = settingItem.querySelector("input");
      if (!importPathEl) return;
      const importPath = importPathEl.value.trim();
      if (!importPath) {
        new import_obsidian2.Notice("Please enter a file path");
        return;
      }
      const adapter = this.plugin.app.vault.adapter;
      const fileExists = await adapter.exists(importPath);
      if (!fileExists) {
        new import_obsidian2.Notice(`File not found: ${importPath}`);
        return;
      }
      const importData = await adapter.read(importPath);
      try {
        const importedGenerators = JSON.parse(importData);
        if (!Array.isArray(importedGenerators)) {
          new import_obsidian2.Notice("Invalid import file: not an array of generators");
          return;
        }
        let validCount = 0;
        for (const generator of importedGenerators) {
          if (validateGenerator(generator)) {
            let baseName = generator.name;
            let nameCounter = 1;
            let finalName = baseName;
            while (this.plugin.settings.generators.some((g) => g.name === finalName)) {
              finalName = `${baseName} (${nameCounter})`;
              nameCounter++;
            }
            generator.name = finalName;
            this.plugin.settings.generators.push(generator);
            validCount++;
          }
        }
        if (validCount > 0) {
          await this.plugin.saveSettings();
          this.display();
          new import_obsidian2.Notice(`Imported ${validCount} generators`);
        } else {
          new import_obsidian2.Notice("No valid generators found in import file");
        }
      } catch (jsonError) {
        console.error("Failed to parse import file:", jsonError);
        new import_obsidian2.Notice("Failed to parse import file: invalid JSON");
      }
    } catch (error) {
      console.error("Import error:", error);
      new import_obsidian2.Notice("Failed to import generators");
    }
  }
  /**
   * Restore default generators
   */
  async restoreDefaultGenerators() {
    const defaultGenerators = JSON.parse(JSON.stringify(this.plugin.getDefaultSettings().generators));
    for (const defaultGenerator of defaultGenerators) {
      const existingIndex = this.plugin.settings.generators.findIndex((g) => g.name === defaultGenerator.name);
      if (existingIndex === -1) {
        this.plugin.settings.generators.push(defaultGenerator);
      }
    }
    await this.plugin.saveSettings();
    new import_obsidian2.Notice("Default generators have been restored");
    this.display();
  }
  /**
   * Open Generator Modal for Adding/Editing
   */
  openGeneratorModal(existingGenerator, index) {
    const modal = new import_obsidian2.Modal(this.app);
    modal.titleEl.setText(existingGenerator ? `Edit ${existingGenerator.name} Generator` : "Add New Generator");
    modal.contentEl.style.width = "600px";
    modal.contentEl.style.maxWidth = "80vw";
    modal.contentEl.style.maxHeight = "80vh";
    const modalScrollContainer = modal.contentEl.createDiv("modal-scroll-container");
    modalScrollContainer.style.height = "calc(80vh - 100px)";
    modalScrollContainer.style.overflowY = "auto";
    modalScrollContainer.style.overflowX = "hidden";
    modalScrollContainer.style.padding = "0 20px";
    const generatorToEdit = existingGenerator ? JSON.parse(JSON.stringify(existingGenerator)) : {
      name: "",
      description: "",
      format: "",
      fields: {}
    };
    new import_obsidian2.Setting(modalScrollContainer).setName("Generator Name").addText((text) => {
      text.setValue(generatorToEdit.name || "").setPlaceholder("Enter generator name").onChange((value) => {
        generatorToEdit.name = value;
      });
      setTimeout(() => {
        text.inputEl.focus();
      }, 50);
    });
    new import_obsidian2.Setting(modalScrollContainer).setName("Description").setDesc("Brief description of what this generator creates").addTextArea((text) => {
      text.setValue(generatorToEdit.description || "").setPlaceholder("Description of the generator...").onChange((value) => {
        generatorToEdit.description = value;
      });
      const textEl = text.inputEl;
      textEl.style.width = "100%";
      textEl.style.height = "80px";
    });
    new import_obsidian2.Setting(modalScrollContainer).setName("Format Template").setDesc('Template with {Field} placeholders. Example: "The {Adjective} {Noun} is {Action}."').addTextArea((text) => {
      text.setValue(generatorToEdit.format || "").setPlaceholder("{Field1} {Field2}...").onChange((value) => {
        generatorToEdit.format = value;
      });
      const textEl = text.inputEl;
      textEl.style.width = "100%";
      textEl.style.height = "60px";
      textEl.style.fontFamily = "monospace";
    });
    const fieldsSection = modalScrollContainer.createDiv("fields-section");
    fieldsSection.createEl("h3", { text: "Fields" });
    fieldsSection.createEl("p", {
      text: "Define the fields used in the format template. Each field contains multiple options that will be randomly selected.",
      cls: "setting-item-description"
    });
    const fieldsContainer = fieldsSection.createDiv("fields-container");
    const addFieldSetting = (fieldName = "", values = [""]) => {
      const fieldContainer = fieldsContainer.createDiv("field-container");
      fieldContainer.style.marginBottom = "15px";
      fieldContainer.style.padding = "15px";
      fieldContainer.style.border = "1px solid var(--background-modifier-border)";
      fieldContainer.style.borderRadius = "5px";
      fieldContainer.style.background = "var(--background-primary-alt)";
      fieldContainer.style.width = "100%";
      const fieldHeader = fieldContainer.createDiv("field-header");
      fieldHeader.style.display = "flex";
      fieldHeader.style.justifyContent = "space-between";
      fieldHeader.style.alignItems = "center";
      fieldHeader.style.marginBottom = "10px";
      fieldHeader.style.width = "100%";
      const nameInput = document.createElement("input");
      nameInput.type = "text";
      nameInput.value = fieldName;
      nameInput.placeholder = "Field Name";
      nameInput.style.flex = "1";
      nameInput.style.marginRight = "10px";
      nameInput.style.padding = "6px 8px";
      nameInput.style.border = "1px solid var(--background-modifier-border)";
      nameInput.style.borderRadius = "4px";
      fieldHeader.appendChild(nameInput);
      const deleteFieldBtn = document.createElement("button");
      deleteFieldBtn.textContent = "\xD7";
      deleteFieldBtn.style.color = "var(--text-error)";
      deleteFieldBtn.style.background = "none";
      deleteFieldBtn.style.border = "none";
      deleteFieldBtn.style.fontSize = "1.2em";
      deleteFieldBtn.style.cursor = "pointer";
      deleteFieldBtn.style.padding = "4px 8px";
      deleteFieldBtn.title = "Delete Field";
      deleteFieldBtn.addEventListener("click", () => {
        fieldContainer.remove();
      });
      fieldHeader.appendChild(deleteFieldBtn);
      const valuesLabel = fieldContainer.createEl("label", {
        text: "Values (one per line):",
        attr: { style: "display: block; margin-bottom: 5px; font-size: 0.9em;" }
      });
      const valuesTextarea = fieldContainer.createEl("textarea", {
        attr: {
          placeholder: "Enter values, one per line"
        }
      });
      valuesTextarea.style.width = "100%";
      valuesTextarea.style.height = "100px";
      valuesTextarea.style.fontFamily = "monospace";
      valuesTextarea.style.padding = "8px";
      valuesTextarea.style.border = "1px solid var(--background-modifier-border)";
      valuesTextarea.style.borderRadius = "4px";
      valuesTextarea.style.boxSizing = "border-box";
      valuesTextarea.value = values.join("\n");
      return { container: fieldContainer, nameInput, valuesTextarea };
    };
    const fieldElements = [];
    if (generatorToEdit.fields) {
      Object.entries(generatorToEdit.fields).forEach(([fieldName, values]) => {
        const { container, nameInput, valuesTextarea } = addFieldSetting(fieldName, values);
        fieldElements.push({ container, nameInput, valuesTextarea, originalName: fieldName });
      });
    }
    const addFieldBtn = fieldsSection.createEl("button", {
      text: "Add Field",
      cls: "mod-cta"
    });
    addFieldBtn.style.marginTop = "10px";
    addFieldBtn.addEventListener("click", () => {
      const { container, nameInput, valuesTextarea } = addFieldSetting();
      fieldElements.push({ container, nameInput, valuesTextarea, originalName: "" });
    });
    if (fieldElements.length === 0) {
      const { container, nameInput, valuesTextarea } = addFieldSetting();
      fieldElements.push({ container, nameInput, valuesTextarea, originalName: "" });
    }
    const buttonContainer = modal.contentEl.createDiv("button-container");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";
    buttonContainer.style.marginTop = "15px";
    buttonContainer.style.padding = "15px 20px";
    buttonContainer.style.borderTop = "1px solid var(--background-modifier-border)";
    buttonContainer.style.width = "100%";
    buttonContainer.style.boxSizing = "border-box";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.style.padding = "6px 16px";
    cancelButton.style.borderRadius = "4px";
    cancelButton.style.border = "1px solid var(--background-modifier-border)";
    cancelButton.style.background = "var(--background-secondary)";
    cancelButton.addEventListener("click", () => {
      modal.close();
    });
    const saveButton = buttonContainer.createEl("button", {
      text: "Save Generator",
      cls: "mod-cta"
    });
    saveButton.style.padding = "6px 16px";
    saveButton.style.borderRadius = "4px";
    saveButton.style.background = "var(--interactive-accent)";
    saveButton.style.color = "var(--text-on-accent)";
    saveButton.style.border = "none";
    saveButton.addEventListener("click", async () => {
      if (!generatorToEdit.name.trim()) {
        new import_obsidian2.Notice("Generator name is required");
        return;
      }
      if (!generatorToEdit.format.trim()) {
        new import_obsidian2.Notice("Format template is required");
        return;
      }
      const updatedFields = {};
      for (const field of fieldElements) {
        const fieldName = field.nameInput.value.trim();
        const fieldValues = field.valuesTextarea.value.split("\n").map((v) => v.trim()).filter((v) => v !== "");
        if (!fieldName || fieldValues.length === 0) continue;
        if (updatedFields[fieldName]) {
          new import_obsidian2.Notice(`Duplicate field name: ${fieldName}`);
          return;
        }
        updatedFields[fieldName] = fieldValues;
      }
      if (Object.keys(updatedFields).length === 0) {
        new import_obsidian2.Notice("At least one field with values is required");
        return;
      }
      generatorToEdit.fields = updatedFields;
      if (index !== void 0) {
        this.plugin.settings.generators[index] = generatorToEdit;
      } else {
        this.plugin.settings.generators.push(generatorToEdit);
      }
      await this.plugin.saveSettings();
      modal.close();
      this.display();
    });
    modal.open();
  }
};

// src/utils/css-loader.ts
var CSSLoader = class {
  constructor(app) {
    this.styleElement = null;
    this.app = app;
  }
  /**
   * Load CSS - either default or custom
   * @param customCSSEnabled Whether custom CSS is enabled
   * @param customCSSPath Path to custom CSS file
   */
  async loadCSS(customCSSEnabled, customCSSPath) {
    try {
      this.removeExistingStyles();
      this.styleElement = document.createElement("style");
      this.styleElement.id = "random-generator-styles";
      if (customCSSEnabled && customCSSPath) {
        try {
          const adapter = this.app.vault.adapter;
          const css = await adapter.read(customCSSPath);
          this.styleElement.textContent = css;
          document.head.appendChild(this.styleElement);
        } catch (error) {
          console.error("Failed to load custom CSS:", error);
          this.loadDefaultCSS();
        }
      } else {
        this.loadDefaultCSS();
      }
    } catch (error) {
      console.error("Error in loadCSS:", error);
    }
  }
  /**
   * Load the default CSS
   */
  loadDefaultCSS() {
    try {
      if (this.styleElement) {
        this.styleElement.textContent = DEFAULT_CSS;
        document.head.appendChild(this.styleElement);
      }
    } catch (error) {
      console.error("Error in loadDefaultCSS:", error);
    }
  }
  /**
   * Remove existing plugin styles
   */
  removeExistingStyles() {
    const oldStyleElement = document.getElementById("random-generator-styles");
    if (oldStyleElement) {
      oldStyleElement.remove();
    }
    this.styleElement = null;
  }
  /**
   * Clean up resources
   */
  unload() {
    this.removeExistingStyles();
  }
};

// src/plugin.ts
var RandomGeneratorPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    this.cssLoader = new CSSLoader(this.app);
    await this.loadSettings();
    this.addRibbonIcon("dice", "Random Generator", () => {
      new GeneratorModal(this.app, this).open();
    });
    this.addCommand({
      id: "open-random-generator",
      name: "Open Random Generator",
      callback: () => {
        new GeneratorModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "insert-random-generation",
      name: "Insert Random Generation",
      editorCallback: (editor) => {
        if (!this.settings.generators || this.settings.generators.length === 0) {
          new import_obsidian3.Notice("No generators available");
          return;
        }
        const generator = this.settings.generators[0];
        const result = generateFromTemplate(generator);
        editor.replaceSelection(result);
      }
    });
    this.addSettingTab(new RandomGeneratorSettingTab(this.app, this));
    setTimeout(() => {
      this.loadCSS();
    }, 0);
  }
  onunload() {
    this.cssLoader.unload();
  }
  /**
   * Load plugin settings
   */
  async loadSettings() {
    try {
      const data = await this.loadData();
      this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
      if (!Array.isArray(this.settings.generators)) {
        this.settings.generators = DEFAULT_SETTINGS.generators;
      }
      if (this.settings.customCSSEnabled === void 0) {
        this.settings.customCSSEnabled = false;
        this.settings.customCSSPath = "";
      }
    } catch (error) {
      console.error("Failed to load settings:", error);
      this.settings = Object.assign({}, DEFAULT_SETTINGS);
    }
  }
  /**
   * Save plugin settings
   */
  async saveSettings() {
    try {
      await this.saveData(this.settings);
    } catch (error) {
      console.error("Failed to save settings:", error);
      new import_obsidian3.Notice("Failed to save settings");
    }
  }
  /**
   * Load CSS - either default or custom
   */
  loadCSS() {
    try {
      this.cssLoader.loadCSS(this.settings.customCSSEnabled, this.settings.customCSSPath);
    } catch (error) {
      console.error("Error in loadCSS:", error);
    }
  }
  /**
   * Get a copy of the default settings
   */
  getDefaultSettings() {
    return JSON.parse(JSON.stringify(DEFAULT_SETTINGS));
  }
};

// main.ts
var main_default = RandomGeneratorPlugin;
